import { PlayerAura } from "../../wowutils/wow_utils";
import { PriorityAction } from "../players/SpellstealPriority";
import { Warlock } from "../players/warlock";
import { DruidAura } from "./druid_utils";
import { HunterAura } from "./hunter_utils";
import { MageAura } from "./mage_utils";
import { PaladinAura } from "./paladin_utils";
import { PriestAura } from "./priest_utils";
import { ShamanAura } from "./shaman_utils";
import { WarlockAura } from "./warlock_utils";

export const SpellstealPriorityMap = new Map<PlayerAura, PriorityAction>();
SpellstealPriorityMap.set(MageAura.Combustion, PriorityAction.Required);
SpellstealPriorityMap.set(PaladinAura.LightsGrace, PriorityAction.Low);
SpellstealPriorityMap.set(PaladinAura.DivineFavor, PriorityAction.High);
SpellstealPriorityMap.set(PaladinAura.BlessingOfProtection, PriorityAction.High);
SpellstealPriorityMap.set(PaladinAura.BlessingOfFreedom, PriorityAction.Medium);
SpellstealPriorityMap.set(HunterAura.MastersCall, PriorityAction.Medium);
SpellstealPriorityMap.set(MageAura.IcyVeins, PriorityAction.High);
SpellstealPriorityMap.set(MageAura.BlazingBarrier, PriorityAction.High);
SpellstealPriorityMap.set(MageAura.ArcanePower, PriorityAction.High);
SpellstealPriorityMap.set(MageAura.PresenceOfMind, PriorityAction.Medium);
SpellstealPriorityMap.set(MageAura.PresenceOfMind, PriorityAction.Medium);
SpellstealPriorityMap.set(PriestAura.PowerWordFortitude, PriorityAction.Low);
SpellstealPriorityMap.set(PriestAura.PowerWordShield, PriorityAction.Medium);
SpellstealPriorityMap.set(DruidAura.Thorns, PriorityAction.High);
SpellstealPriorityMap.set(WarlockAura.NetherWard, PriorityAction.High);
SpellstealPriorityMap.set(WarlockAura.Backdraft, PriorityAction.Low);
SpellstealPriorityMap.set(ShamanAura.Heroism, PriorityAction.Medium);
SpellstealPriorityMap.set(ShamanAura.Bloodlust, PriorityAction.Medium);
SpellstealPriorityMap.set(WarlockAura.DarkSoulInstability, PriorityAction.High);
SpellstealPriorityMap.set(WarlockAura.DarkSoulMisery, PriorityAction.High);
